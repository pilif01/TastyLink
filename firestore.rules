rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isPublic() {
      return resource.data.visibility == 'public';
    }
    
    function isFriends() {
      return resource.data.visibility == 'friends';
    }
    
    function isPrivate() {
      return resource.data.visibility == 'private';
    }
    
    function isPremium() {
      return isAuthenticated() && 
        (resource.data.premiumUntil != null && 
         resource.data.premiumUntil > request.time);
    }
    
    function isWithinFreeLimit() {
      return isAuthenticated() && 
        (resource.data.monthlyProcessedCount == null || 
         resource.data.monthlyProcessedCount < 10);
    }
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isPublic() || (isFriends() && isAuthenticated());
    }
    
    // Recipes collection - public read, write only by authenticated users
    match /recipes/{recipeId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
        (isPremium() || isWithinFreeLimit());
      allow update: if isAuthenticated() && 
        (resource.data.createdByUid == null || 
         resource.data.createdByUid == request.auth.uid);
      allow delete: if isAuthenticated() && 
        resource.data.createdByUid == request.auth.uid;
    }
    
    // User recipes (saved recipes) - users can only access their own
    match /user_recipes/{userId}/saved/{recipeId} {
      allow read, write: if isOwner(userId);
    }
    
    // Shopping lists - users can only access their own
    match /shopping_lists/{userId}/items/{itemId} {
      allow read, write: if isOwner(userId);
    }
    
    // Meal planner - users can only access their own
    match /planner/{userId}/weeks/{weekId}/days/{dayId}/slots/{slotId} {
      allow read, write: if isOwner(userId);
    }
    
    // Activities - users can only access their own
    match /activities/{userId}/events/{eventId} {
      allow read, write: if isOwner(userId);
    }
    
    // Social posts - public read if visibility allows, write only by owner
    match /social/posts/{postId} {
      allow read: if isPublic() || 
        (isFriends() && isAuthenticated()) ||
        (isPrivate() && isOwner(resource.data.uid));
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(resource.data.uid);
      allow delete: if isOwner(resource.data.uid);
    }
    
    // Social follows - users can read their own follows, write only their own
    match /social/follows/{userId}/following/{otherUserId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Rate limiting for likes/comments (handled by Cloud Functions)
    match /social/posts/{postId}/likes/{likeId} {
      allow read: if true;
      allow write: if false; // Only via Cloud Functions
    }
    
    match /social/posts/{postId}/comments/{commentId} {
      allow read: if true;
      allow write: if false; // Only via Cloud Functions
    }
    
    // Reports collection - users can create reports, admins can read
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read: if false; // Only admins via Cloud Functions
      allow update: if false;
      allow delete: if false;
    }
    
    // User usage tracking - users can only access their own
    match /usage/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Premium subscriptions - users can only access their own
    match /subscriptions/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}
